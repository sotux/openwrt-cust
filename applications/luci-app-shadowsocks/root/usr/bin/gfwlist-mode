#!/bin/sh
. $IPKG_INSTROOT/lib/functions.sh

GFWLIST=gfwlist.conf
GFWLIST_GZ=gfwlist.conf.gz
DNSLIST=dns.conf
FWDDOMAINLIST=forward_domain.conf
GFWMODE=$(uci get shadowsocks.@access_control[0].wan_bp_list 2>/dev/null)
GFWURL=$(uci get shadowsocks.@access_control[0].gfwlist_url 2>/dev/null)
DNS=$(uci get shadowsocks.@access_control[0].dns_for_unblocked_sites 2>/dev/null)
FWDDOMAIN=$(uci get shadowsocks.@access_control[0].wan_fw_domain 2>/dev/null)
DNSLOCALPORT=$(uci get shadowsocks.@port_forward[0].local_port 2>/dev/null)
PORTFWDSVR=$(uci get shadowsocks.@port_forward[0].server 2>/dev/null)
RETVAL=0

# get dnsmasq conf-dir
config_get dnsmasqconfdir dnsmasq confdir "/tmp/dnsmasq.d"
dnsmasqconfdir="${dnsmasqconfdir%%,*}"
[ ! -d "$dnsmasqconfdir" ] && mkdir -p $dnsmasqconfdir

loger() {
	# 1.alert 2.crit 3.err 4.warn 5.notice 6.info 7.debug
	logger -st gfwlist-mode[$$] -p$1 $2
}

usage() {
	cat <<-EOF
		Usage: gfwlist-mode [options]

		Valid options are:

		    -on                     enable GFWList mode
		    -off                    disable GFWList mode
		    -update                 download GFWList file from server
		    -h                      show this help message and exit
EOF
	exit $1
}

update_gfwlist() {

	if [ -z $GFWURL ]; then
		loger 3 "Update GFWList file failed because of invalid URL."
		return 1
	fi

	# Download GFWList file
	local OLDPWD=`pwd`
	cd /tmp

	rm -f $GFWLIST
	curl -o $GFWLIST $GFWURL
	if [ ! -s $GFWLIST ]; then
		loger 3 "Download GFWList file from $GFWURL failed ."
		cd $OLDPWD
		return 1
	fi

	# Compress and save GFWList file in /etc
	gzip -c $GFWLIST > /etc/$GFWLIST_GZ
	rm -f $GFWLIST

	cd $OLDPWD
	return $?
}

gfwmode_enable() {
	# Generate dns.conf in $dnsmasqconfdir
	if [ -e $dnsmasqconfdir/$DNSLIST ]; then
		rm -f $dnsmasqconfdir/$DNSLIST
		touch $dnsmasqconfdir/$DNSLIST
	fi
	for var in $DNS
	do
		echo "server=$var" >> $dnsmasqconfdir/$DNSLIST
	done

	# Generate forward_domain.conf in $dnsmasqconfdir
	if [ -e $dnsmasqconfdir/$FWDDOMAINLIST ]; then
		rm -f $dnsmasqconfdir/$FWDDOMAINLIST
		touch $dnsmasqconfdir/$FWDDOMAINLIST
	fi
	for var in $FWDDOMAIN
	do
		echo "server=/$var/127.0.0.1#$DNSLOCALPORT" >> $dnsmasqconfdir/$FWDDOMAINLIST
		echo "ipset=/$var/gfwlist" >> $dnsmasqconfdir/$FWDDOMAINLIST
	done

	# If /etc/$GFWLIST_GZ exist then extract to $dnsmasqconfdir
	if [ ! -s /etc/$GFWLIST_GZ ]; then
		update_gfwlist
		if [ ! $? -eq 0 ]; then
			rm -f $dnsmasqconfdir/$GFWLIST
			rm -f $dnsmasqconfdir/$DNSLIST
			rm -f $dnsmasqconfdir/$FWDDOMAINLIST
		else
			gzip -d -c /etc/$GFWLIST_GZ > $dnsmasqconfdir/$GFWLIST
		fi
	else
		gzip -d -c /etc/$GFWLIST_GZ > $dnsmasqconfdir/$GFWLIST
	fi

	autoresolv_switch

	/etc/init.d/dnsmasq restart

	return $?
}

gfwmode_disable() {
	rm -f $dnsmasqconfdir/$GFWLIST
	rm -f $dnsmasqconfdir/$DNSLIST
	rm -f $dnsmasqconfdir/$FWDDOMAINLIST

	autoresolv_switch true
	ipset destroy gfwlist

	/etc/init.d/dnsmasq restart

	return $?
}

autoresolv_switch() {
	# if no port forward server selected, use default file resolv.conf.auto
	# otherwise use dns port forward and disable auto resolve
	local nilFlag=true

	for server in $PORTFWDSVR
	do
		if [ $server != "nil" ]; then
			nilFlag=false
			break
		fi
	done
	if [[ $nilFlag || $1 ]]; then
		loger 6 "Switch resolve file to /tmp/resolv.conf.auto"
		uci delete dhcp.@dnsmasq[0].noresolv
		uci set dhcp.@dnsmasq[0].resolvfile="/tmp/resolv.conf.auto"
	else
		loger 6 "Switch to noresolv"
		uci delete dhcp.@dnsmasq[0].resolvfile
		uci set dhcp.@dnsmasq[0].noresolv="1"
	fi
	uci commit
}

if [ $1 == "-on" ]; then
	gfwmode_enable
	RETVAL=$?
	[[ $RETVAL -eq 0 ]] && loger 6 "Enable GFWList Mode successful." || loger 3 "Enable GFWList Mode failed."
elif [ $1 == "-off" ]; then
	gfwmode_disable
	RETVAL=$?
	[[ $RETVAL -eq 0 ]] && loger 6 "Disable GFWList Mode successful." || loger 3 "Disable GFWList Mode failed."
elif [ $1 == "-update" ]; then
	update_gfwlist
	RETVAL=$?
	# GFWList mode
	if [ $GFWMODE == "/etc/gfwlist_mode.txt" ] && [ $RETVAL -eq 0 ]; then
		/etc/init.d/dnsmasq restart
        RETVAL=$?
	fi
	[[ $RETVAL -eq 0 ]] && loger 6 "Update GFWList file successful." || loger 3 "Update GFWList file failed."
else
	usage 0
	RETVAL=$?
fi

return $RETVAL
